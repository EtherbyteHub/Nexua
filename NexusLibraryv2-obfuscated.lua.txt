
 local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Etherbyte Hub | Arise Crossover",
    SubTitle = "By Dantes",
    TabWidth = 140,
    Size = UDim2.fromOffset(450, 350),
    Acrylic = false,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.RightShift
})

local Tabs = {
    Discord = Window:AddTab({ Title = "Discord", Icon = ""}),

    Main = Window:AddTab({ Title = "Main", Icon = "" }),
 tp = Window:AddTab({ Title = "Teleports", Icon = "" }),
    mount = Window:AddTab({ Title = "Mount Location ", Icon = "" }),
   
}

local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local enemiesFolder = workspace:WaitForChild("__Main"):WaitForChild("__Enemies"):WaitForChild("Client")
local remote = game:GetService("ReplicatedStorage"):WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")

local teleportEnabled = false
local damageEnabled = false
local autoAriseEnabled = false
local killedNPCs = {}
local selectedMobName = ""
-- Function to get the nearest enemy that hasnÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢t been killed
local function getNearestEnemy()
    local nearestEnemy = nil
    local shortestDistance = math.huge
    local playerPosition = player.Character and player.Character:GetPivot().Position

    if not playerPosition then return nil end

    for _, enemy in ipairs(enemiesFolder:GetChildren()) do
        if enemy:IsA("Model") and enemy:FindFirstChild("HumanoidRootPart") then
            local enemyID = enemy.Name
            if not killedNPCs[enemyID] then
                local enemyPosition = enemy:GetPivot().Position
                local distance = (playerPosition - enemyPosition).Magnitude
                if distance < shortestDistance then
                    shortestDistance = distance
                    nearestEnemy = enemy
                end
            end
        end
    end
    return nearestEnemy
end

-- Auto Arise Farm Function
    
local function autoAriseFarm()
    while autoAriseEnabled do
        local petsData = player.leaderstats:FindFirstChild("Equips") and player.leaderstats.Equips:FindFirstChild("Pets")
        if not petsData then
            Fluent:Notify({ Title = "Error", Content = "Could not find equipped pets!", Duration = 3 })
            break
        end

        local petPositions = {}
        for _, pet in pairs(petsData:GetAttributes()) do
            petPositions[pet] = hrp.Position + Vector3.new(math.random(-5, 5), 0, math.random(-5, 5))
        end

        local targetEnemy = getNearestEnemy()
        if targetEnemy then
            remote:FireServer({
                {
                    ["PetPos"] = petPositions,
                    ["AttackType"] = "All",
                    ["Event"] = "Attack",
                    ["Enemy"] = targetEnemy.Name
                },
                "\7"
            })

            -- Wait until the enemy is dead
            while autoAriseEnabled and targetEnemy.Parent do
                local healthBar = targetEnemy:FindFirstChild("HealthBar", true)
                if healthBar then
                    local amount = healthBar:FindFirstChild("Main") and healthBar.Main:FindFirstChild("Bar") and healthBar.Main.Bar:FindFirstChild("Amount")
                    if amount and amount.ContentText == "0 HP" then
                        break -- Stop attacking if the current enemy is dead
                    end
                end
                task.wait(0.2)
            end

            -- **5-second delay before choosing the next enemy**
            task.wait(5)
        end

        task.wait(0.2) -- Small delay before checking for a new enemy
    end
end







        








local function getNearestSelectedEnemy()
    local nearestEnemy = nil
    local shortestDistance = math.huge
    local playerPosition = hrp.Position

    for _, enemy in ipairs(enemiesFolder:GetChildren()) do
        if enemy:IsA("Model") and enemy:FindFirstChild("HumanoidRootPart") then
            local healthBar = enemy:FindFirstChild("HealthBar")
            if healthBar and healthBar:FindFirstChild("Main") and healthBar.Main:FindFirstChild("Title") then
                local title = healthBar.Main.Title
                if title and title:IsA("TextLabel") and title.ContentText == selectedMobName and not killedNPCs[enemy.Name] then
                    local enemyPosition = enemy.HumanoidRootPart.Position
                    local distance = (playerPosition - enemyPosition).Magnitude
                    if distance < shortestDistance then
                        shortestDistance = distance
                        nearestEnemy = enemy
                    end
                end
            end
        end
    end
    return nearestEnemy
end

local function isEnemyDead(enemy)
    local healthBar = enemy:FindFirstChild("HealthBar")
    if healthBar and healthBar:FindFirstChild("Main") and healthBar.Main:FindFirstChild("Bar") then
        local amount = healthBar.Main.Bar:FindFirstChild("Amount")
        if amount and amount:IsA("TextLabel") and amount.ContentText == "0 HP" then
            return true
        end
    end
    return false
end


-- Teleport and track enemy death
-- Teleport and track enemy death
local function teleportAndTrackDeath()
    while teleportEnabled do
        local target = getNearestEnemy()
        if target and target.Parent then
            local enemyHrp = target:FindFirstChild("HumanoidRootPart")
            if enemyHrp then
                hrp.CFrame = enemyHrp.CFrame * CFrame.new(0, 0, 6) -- Teleport near the enemy

                -- Wait until the enemy's HP is 0
                while teleportEnabled and target.Parent and not isEnemyDead(target) do
                    task.wait(0.1)
                end

                -- Mark the NPC as killed
                killedNPCs[target.Name] = true
            end
        end
        task.wait(2) -- Small delay before teleporting to the next enemy
    end
end
local function teleportToSelectedEnemy()
    while teleportEnabled do
        local target = getNearestSelectedEnemy()
        if target and target.Parent then
            local enemyHrp = target:FindFirstChild("HumanoidRootPart")
            if enemyHrp then
                hrp.CFrame = enemyHrp.CFrame * CFrame.new(0, 0, 6) -- Teleport near the enemy

                -- Wait until the enemy is dead
                while teleportEnabled and target.Parent and not isEnemyDead(target) do
                    task.wait(0.1)
                end

                -- Mark the NPC as killed
                killedNPCs[target.Name] = true
            end
        end
        task.wait(2) -- Small delay before teleporting to the next selected enemy
    end
end




-- Teleport to the selected enemy after a 2-second delay




-- Attack function
local function attackEnemy()
    while damageEnabled do
        local targetEnemy = getNearestEnemy()
        if targetEnemy then
            local args = {
                [1] = {
                    [1] = {
                        ["Event"] = "PunchAttack",
                        ["Enemy"] = targetEnemy.Name
                    },
                    [2] = "\4"
                }
            }
            remote:FireServer(unpack(args))
        end
        task.wait(0.1)
    end
end




-- UI Setup


Tabs.Main:AddInput("Input", {
    Title = "Enter Mob Name",
    Default = "",
    Placeholder = "Type Here",
    Callback = function(text)
        selectedMobName = text
        killedNPCs = {} -- Reset killed NPCs when changing mob
        print("Selected Mob:", selectedMobName) -- Debugging
    end
})

Tabs.Main:AddToggle("FarmSelectedMob", {
    Title = "Farm Selected Mob",
    Default = false,
    Callback = function(state)
        teleportEnabled = state
        damageEnabled = state -- Ensures damage mobs is active
        killedNPCs = {} -- Reset killed NPCs when enabling farm
        if state then
            task.spawn(teleportToSelectedEnemy)
        end
    end
})

Tabs.Main:AddToggle("TeleportMobs", {
    Title = "auto farm(nearest npcs)",
    Default = false,
    Callback = function(state)
        teleportEnabled = state
        if state then
            task.spawn(teleportAndTrackDeath)
        end
    end
})

Tabs.Main:AddToggle("DamageMobs", {
    Title = "Damage Mobs ENABLE THIS",
    Default = false,
    Callback = function(state)
        damageEnabled = state
        if state then
            task.spawn(attackEnemy)
        end
    end
})

Tabs.Main:AddToggle("AutoAriseFarm", {
    Title = "Auto Shadow Farm",
    Default = false,
    Callback = function(state)
        autoAriseEnabled = state
        if state then
            task.spawn(autoAriseFarm)
        end
    end
})



Tabs.tp:AddButton({
    Title = "brum island",
    Description = "",
    Callback = function()
        -- Tween logic to teleport to a specific CFrame

        local TweenService = game:GetService("TweenService")

        -- Target CFrame for the position and orientation
        local targetCFrame = CFrame.new(
            -2854.13135, 49.3742943, -2020.86523,  -- Position
            0.571377695, -1.40275418e-07, 0.820687234,  -- Rotation matrix values
            -5.62655828e-07, 1, 5.62655771e-07,
            -0.820687234, -7.83253427e-07, 0.571377695
        )

        -- Retrieve the player's HumanoidRootPart
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")

        -- Create the tween information (speed, easing style, etc.)
        local tweenInfo = TweenInfo.new(
            2,  -- Duration of the tween in seconds (you can adjust this)
            Enum.EasingStyle.Sine,  -- Easing style (smooth transition)
            Enum.EasingDirection.Out,  -- Easing direction (smooth exit)
            0,  -- Times to repeat (0 means no repeat)
            false,  -- Reverses the tween? (false means no reverse)
            0  -- Delay time before starting the tween (0 means immediate)
        )

        -- Create the tween goal (the target CFrame)
        local tweenGoal = {CFrame = targetCFrame}

        -- Create the tween instance
        local tween = TweenService:Create(hrp, tweenInfo, tweenGoal)

        -- Play the tween
        tween:Play()

        -- Optional: Wait for the tween to complete before allowing further actions
        tween.Completed:Wait()
    end
})


Tabs.tp:AddButton({
    Title = "Grass village",
    Description = "",
    Callback = function()
        -- Tween logic to teleport to a specific CFrame

        local TweenService = game:GetService("TweenService")

        -- Target CFrame for the position and orientation
        local targetCFrame = CFrame.new(
          -3649.71802, 29.2152214, 2381.23682, -0.991485536, 2.13852001e-32, -0.130217001, -8.33432621e-33, 1, 2.27685827e-31, 0.130217001, 2.26832465e-31, -0.991485536


        )

        -- Retrieve the player's HumanoidRootPart
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")

        -- Create the tween information (speed, easing style, etc.)
        local tweenInfo = TweenInfo.new(
            2,  -- Duration of the tween in seconds (you can adjust this)
            Enum.EasingStyle.Sine,  -- Easing style (smooth transition)
            Enum.EasingDirection.Out,  -- Easing direction (smooth exit)
            0,  -- Times to repeat (0 means no repeat)
            false,  -- Reverses the tween? (false means no reverse)
            0  -- Delay time before starting the tween (0 means immediate)
        )

        -- Create the tween goal (the target CFrame)
        local tweenGoal = {CFrame = targetCFrame}

        -- Create the tween instance
        local tween = TweenService:Create(hrp, tweenInfo, tweenGoal)

        -- Play the tween
        tween:Play()

        -- Optional: Wait for the tween to complete before allowing further actions
        tween.Completed:Wait()
    end
})

Tabs.tp:AddButton({
    Title = "solo city",
    Description = "",
    Callback = function()
        -- Tween logic to teleport to a specific CFrame

        local TweenService = game:GetService("TweenService")

        -- Target CFrame for the position and orientation
        local targetCFrame = CFrame.new(
           577.964233, 28.4345779, 277.14505, 1, 2.90251018e-37, 2.08676574e-05, -2.90244404e-37, 1, -3.17774964e-37, -2.08676574e-05, 3.17768888e-37, 1


        )

        -- Retrieve the player's HumanoidRootPart
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")

        -- Create the tween information (speed, easing style, etc.)
        local tweenInfo = TweenInfo.new(
            2,  -- Duration of the tween in seconds (you can adjust this)
            Enum.EasingStyle.Sine,  -- Easing style (smooth transition)
            Enum.EasingDirection.Out,  -- Easing direction (smooth exit)
            0,  -- Times to repeat (0 means no repeat)
            false,  -- Reverses the tween? (false means no reverse)
            0  -- Delay time before starting the tween (0 means immediate)
        )

        -- Create the tween goal (the target CFrame)
        local tweenGoal = {CFrame = targetCFrame}

        -- Create the tween instance
        local tween = TweenService:Create(hrp, tweenInfo, tweenGoal)

        -- Play the tween
        tween:Play()

        -- Optional: Wait for the tween to complete before allowing further actions
        tween.Completed:Wait()
    end
})

Tabs.tp:AddButton({
    Title = "Faceheal town",
    Description = "",
    Callback = function()
        -- Tween logic to teleport to a specific CFrame

        local TweenService = game:GetService("TweenService")

        -- Target CFrame for the position and orientation
        local targetCFrame = CFrame.new(
           2695.16406, 46.4275322, -2583.54956, -0.722509384, -7.96064967e-07, 0.691361129, -5.63039578e-07, 1, 5.63039521e-07, -0.691361129, 1.75376762e-08, -0.722509384


        )

        -- Retrieve the player's HumanoidRootPart
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")

        -- Create the tween information (speed, easing style, etc.)
        local tweenInfo = TweenInfo.new(
            2,  -- Duration of the tween in seconds (you can adjust this)
            Enum.EasingStyle.Sine,  -- Easing style (smooth transition)
            Enum.EasingDirection.Out,  -- Easing direction (smooth exit)
            0,  -- Times to repeat (0 means no repeat)
            false,  -- Reverses the tween? (false means no reverse)
            0  -- Delay time before starting the tween (0 means immediate)
        )

        -- Create the tween goal (the target CFrame)
        local tweenGoal = {CFrame = targetCFrame}

        -- Create the tween instance
        local tween = TweenService:Create(hrp, tweenInfo, tweenGoal)

        -- Play the tween
        tween:Play()

        -- Optional: Wait for the tween to complete before allowing further actions
        tween.Completed:Wait()
    end
})



local TweenService = game:GetService("TweenService")





-- Get Player and HumanoidRootPart
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

-- Tween Function
local function teleportWithTween(targetCFrame)
    local tweenInfo = TweenInfo.new(
        2, -- Duration (seconds)
        Enum.EasingStyle.Sine,
        Enum.EasingDirection.Out,
        0, -- No repeat
        false, -- No reverse
        0 -- No delay
    )
    
    local tweenGoal = {CFrame = targetCFrame}
    local tween = TweenService:Create(hrp, tweenInfo, tweenGoal)
    tween:Play()
end

-- Locations List
local locations = {
    {Name = "Location 1", CFrame = CFrame.new(-6161.25781, 140.639832, 5512.9668, -0.41691944, -8.07482721e-08, 0.908943415, -2.94452178e-07, 1, -4.62235228e-08, -0.908943415, -2.86911842e-07, -0.41691944)},
    {Name = "Location 2", CFrame = CFrame.new(-5868.44141, 132.70488, 362.519379, 0.836233854, -7.47273816e-08, -0.548372984, 2.59595481e-07, 1, 2.59595481e-07, 0.548372984, -3.59437678e-07, 0.836233854)},
    {Name = "Location 3", CFrame = CFrame.new(-5430.81006, 107.441559, -5502.25244, 0.8239398, -3.60997859e-07, -0.566677332, 2.59595453e-07, 1, -2.59595396e-07, 0.566677332, 6.67841249e-08, 0.8239398)},
    {Name = "Location 4", CFrame = CFrame.new(-702.243225, 133.344467, -3538.11646, 0.978662074, 0.000114096198, -0.205476329, -0.000112703143, 1, 1.84834444e-05, 0.205476329, 5.06878177e-06, 0.978662074)},
    {Name = "Location 5", CFrame = CFrame.new(450.001709, 117.564827, 3435.4292, -0.999887109, -1.20863996e-12, 0.0150266131, -1.12492459e-12, 1, 5.57959278e-12, -0.0150266131, 5.56205906e-12, -0.999887109)},
    {Name = "Location 6", CFrame = CFrame.new(3230.96826, 135.41008, 36.1600113, -0.534268856, -4.75206689e-05, 0.845314622, -7.48304665e-05, 1, 8.92103617e-06, -0.845314622, -5.84890549e-05, -0.534268856)}
}

-- Add buttons for each location
for _, loc in ipairs(locations) do
    Tabs.mount:AddButton({
        Title = loc.Name,
        Callback = function()
            teleportWithTween(loc.CFrame)
        end
    })
end


Tabs.mount:AddParagraph({
        Title = "NOTE",
        Content = "These are all the locatios.\nWhere Mounts spawn!"
    })

Tabs.Discord:AddButton({
    Title = "Copy Discord Link",
    Description = "Copies the Discord invite link to clipboard",
    Callback = function()
        setclipboard("https://discord.gg/WGVvxfzTP2")
        Fluent:Notify({
            Title = "Copied!",
            Content = "Discord link copied to clipboard.",
            Duration = 3
        })
    end
})

Tabs.Discord:AddParagraph({
        Title = "JOIN UP ",
        Content = "join to see upcoming features"
    })


local autoDestroy = false
local autoArise = false

-- Function to Fire DestroyPrompt
local function fireDestroy()
    while autoDestroy do
        for _, enemy in ipairs(workspace.__Main.__Enemies.Client:GetChildren()) do
            if enemy:IsA("Model") and enemy:FindFirstChild("HumanoidRootPart") then
                local prompt = enemy.HumanoidRootPart:FindFirstChild("DestroyPrompt")
                if prompt and prompt:IsA("ProximityPrompt") then
                    prompt.HoldDuration = 0
                    prompt:InputHoldBegin(game.Players.LocalPlayer)
                    task.wait(0.1)
                    prompt:InputHoldEnd(game.Players.LocalPlayer)
                end
            end
        end
        task.wait(0.5)
    end
end

-- Function to Fire ArisePrompt
local function fireArise()
    while autoArise do
        for _, enemy in ipairs(workspace.__Main.__Enemies.Client:GetChildren()) do
            if enemy:IsA("Model") and enemy:FindFirstChild("HumanoidRootPart") then
                local prompt = enemy.HumanoidRootPart:FindFirstChild("ArisePrompt")
                if prompt and prompt:IsA("ProximityPrompt") then
                    prompt.HoldDuration = 0
                    prompt:InputHoldBegin(game.Players.LocalPlayer)
                    task.wait(0.1)
                    prompt:InputHoldEnd(game.Players.LocalPlayer)
                end
            end
        end
        task.wait(0.5)
    end
end

-- Auto Destroy Toggle
Tabs.Main:AddToggle("AutoDestroy", {
    Title = "Auto Destroy",
    Default = false,
    Callback = function(state)
        autoDestroy = state
        if state then
            task.spawn(fireDestroy)
        end
    end
})

-- Auto Arise Toggle
Tabs.Main:AddToggle("AutoArise", {
    Title = "Auto Arise",
    Default = false,
    Callback = function(state)
        autoArise = state
        if state then
            task.spawn(fireArise)
        end
    end
})



local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart") -- Get HumanoidRootPart

local dungeonFolder = Workspace:WaitForChild("__Main"):WaitForChild("__Dungeon")

-- Create Fluent Window


-- Variable to control teleporting
local teleportingEnabled = false

-- Function to teleport and tween to object
local function teleportToObject(object)
    if object and object:IsA("Part") then
        local goalCFrame = object.CFrame
        
        local tweenInfo = TweenInfo.new(
            1, -- Duration (adjust as needed)
            Enum.EasingStyle.Sine, -- Smooth transition
            Enum.EasingDirection.Out
        )

        local tween = TweenService:Create(hrp, tweenInfo, {CFrame = goalCFrame})
        tween:Play()
    end
end

-- Function to continuously teleport to objects when enabled
local function teleportLoop()
    while teleportingEnabled do
        for _, object in ipairs(dungeonFolder:GetChildren()) do
            teleportToObject(object)
            task.wait(1) -- Prevent excessive execution
        end
        task.wait(0.5) -- Delay before checking again
    end
end

-- Add the toggle button to start/stop teleporting
Tabs.tp:AddToggle("TeleportToDungeon", {
    Title = "Teleport to Dungeon",
    Default = false,
    Callback = function(state)
        teleportingEnabled = state
        if state then
            task.spawn(teleportLoop)  -- Start teleporting loop when the toggle is enabled
        end
    end
})


local function resetAutoFarm()
    -- Reset all toggle states and functions
    killedNPCs = {} -- Reset NPC kills

    print("AutoFarm has been reset!") -- Print message for confirmation

    -- Restart all functions if needed
end

-- Create a loop to reset every 10 seconds
task.spawn(function()
    while true do
        task.wait(120) -- Wait for 10 seconds
        resetAutoFarm() -- Call the reset function
    end
end)


InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Etherbyte Hub",
    Content = "Script Loaded!",
    Duration = 3
})

SaveManager:LoadAutoloadConfig()
function AutoExecuteScript()
    if getgenv().EnableAutoExecute then
        local success, err = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/EtherbyteHub/Arise-crossover-script/refs/heads/main/Maim", true))()
        end)

        if not success then
            warn("Auto Execute failed:", err)
        end
    end
end
AutoExecuteScript()
